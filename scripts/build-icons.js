const fs = require('fs-extra');
const path = require('path');
const { optimize } = require('svgo');
const svgoConfig = require('../svgo.config');

const iconsDir = path.join(__dirname, '../src/icons/24');
const outDir = path.join(__dirname, '../dist/icons');

(async () => {
  await fs.ensureDir(outDir);

  const files = await fs.readdir(iconsDir);
  const iconExports = [];
  const usedNames = new Set();

  for (const file of files) {
    if (!file.endsWith('.svg')) continue;

    const svgPath = path.join(iconsDir, file);
    const svgCode = await fs.readFile(svgPath, 'utf8');

    // Extract the first part of the filename (before any comma) for the component name
    let componentName = file
      .split(',')[0] // Take only the first part before comma
      .replace(/\.svg$/, '')
      .replace(/(^\w|-\w)/g, clear => clear.replace('-', '').toUpperCase());

    // Handle duplicate names by adding a number suffix
    let finalName = componentName;
    let counter = 1;
    while (usedNames.has(finalName)) {
      finalName = `${componentName}${counter}`;
      counter++;
    }
    usedNames.add(finalName);

    try {
      // Optimize SVG with SVGO while preserving stroke attributes
      const result = optimize(svgCode, svgoConfig);
      let optimizedSvg = result.data;

      // Extract the inner content (everything between <svg> tags)
      const innerContentMatch = optimizedSvg.match(/<svg[^>]*>([\s\S]*)<\/svg>/);
      const innerContent = innerContentMatch ? innerContentMatch[1] : '';

      // Generate React component with preserved stroke attributes
      const reactComponent = `import * as React from 'react';

const ${finalName} = (props) => (
  <svg
    {...props}
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth={2}
    strokeLinecap="round"
    strokeLinejoin="round"
    xmlns="http://www.w3.org/2000/svg"
  >
    ${innerContent}
  </svg>
);

export default ${finalName};
`;

      await fs.writeFile(path.join(outDir, `${finalName}.js`), reactComponent, 'utf8');
      console.log(`✅ Generated: ${finalName}`);
      
      // Add to exports list
      iconExports.push(finalName);
    } catch (error) {
      console.error(`❌ Error processing ${file}:`, error);
      
      // Fallback: generate a basic component manually
      const fallbackComponent = `import * as React from 'react';

const ${finalName} = (props) => (
  <svg
    {...props}
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth={2}
    strokeLinecap="round"
    strokeLinejoin="round"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M10 5.5L3.5 12L10 18.5M4 12H20.5" />
  </svg>
);

export default ${finalName};
`;
      
      await fs.writeFile(path.join(outDir, `${finalName}.js`), fallbackComponent, 'utf8');
      iconExports.push(finalName);
      console.log(`✅ Generated fallback: ${finalName}`);
    }
  }

  // Generate index.js file
  const indexContent = `// Auto-generated icon exports
// This file is automatically generated by scripts/build-icons.js
// Do not edit manually

${iconExports.map(name => `export { default as ${name} } from './${name}';`).join('\n')}

// Available Icons:
${iconExports.map(name => `//   ${name}`).join('\n')}

// Usage:
// import { ${iconExports.slice(0, 3).join(', ')} } from 'kruti-icon-library';
// Control size: <${iconExports[0]} size={16} /> <${iconExports[0]} size={20} /> <${iconExports[0]} size={32} />
`;

  await fs.writeFile(path.join(outDir, 'index.js'), indexContent, 'utf8');

  console.log(`\n✅ Icons built successfully into ${outDir}`);
  console.log(`✅ Generated ${iconExports.length} icons`);
})();
